
/* ----------------------------------------------------------------------------------------
    Simple  Commands   */ FROM: teamtreehouse.com


~  		: root path to where you currently are
			ex: /home/treehouse

.  		: current directory
			ex: cd .        		<- this would bring you to the home directory

.. 		: move up a directory
			ex: cd ../ 				<- this would bring you up one directory

!! 		: repeats the last command
 			ex: check the 'sudo' section below

|  		: called a pipe - typically used to combine programs together

TAB TAB : show full list of commands


/* ----------------------------------------------------------------------------------------
    Quick List Commands   */

--- List All Commands
TAB TAB
compgen -ca
compgen -ca > ~/Desktop/commands.txt (will output all the commands to a '.txt' file on your desktop)




----------------------------------   cat (view file quickly)   ---------------------------------------------------------

The cat command pours the whole file onto the screen in one go. If the file is too big, it will overflow the Terminal window, leaving only the tail end visible. The name cat is short for concatenate and was originally written to join many files sequentially to form one large file. For example:

$ cat part1 part2 part3 > all-parts

The cat command has a few useful options. Option -n displays line numbers.


$ cat -n letter.txt
   1  Dear Janet,
   2  How are you these days?

Option -s squeezes multiple blank lines into a single blank line, while option -v displays nonprinting characters visibly. A file containing control characters can look a mess when displayed on the screen; worse, it can put the terminal into a peculiar mode.


----------------------------------   ls (list)   -----------------------------------------------------------------

This lists out the contents of the path selected.  Below it shows a folder named documents and a file named hello.txt
are in the path selected.


ex:

treehouse ~ $ ls
documents  hello.txt
treehouse ~ $


----------------------------     cd (change directory)   ----------------------------------------------------------

This allow you to move to a different directory.  Below it shows us moving into the documents folder or directory.
By only putting cd, it will take you all the way back to your home directory represented by the ' ~ '.


ex:

treehouse ~ $ cd documents
treehouse ~/documents $


-----------------------	 pwd (print working directory)   ----------------------------------------------------------

This shows the path to where we currently are in the file system (home directory).  Below it shows we are in the
documents folder.


ex:

treehouse ~/documents $ pwd
/home/treehouse/documents


-------------------- clear (clears prompt starts at top)   ----------------------------------------------------------

This clears the command prompt and brings us to the top.


--------------------------------   -l (long form)   -----------------------------------------------------------------

The 'drwxrwxr-x' portion below are the permissions.  They are set up in 3 triplets (read, write, execute). The 'd' stands for directory. After the 'd' the 1st part = user: treehouse, the 2nd = group where many can do it, and the 3rd = public.

In the second row below, where it's talking about the 'hello.txt' file, nobody has ability to execute (doesn't make sense to, it's .txt)


ex:

treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-rw-r--  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt
treehouse ~ $


----------------------------     -a (shows hidden files)   ----------------------------------------------------------

All the files below that were brought up with a preceding . are hidden files.


ex:

treehouse ~ $ ls -a
.	.bash_history	.bashrc		documents	.profile	.sudo_as_admin_successful
..	.bash_logout	.cache 		hello.txt	.ssh
treehouse ~ $


----------------------------   cat (concatenates all files together)   -------------------------------------------------

Concatenating 2 files together.


ex:

treehouse ~ $ hello.txt documents/sometextfile.txt
right here
there would be the
hello.txt file
and
right here
there would be the
sometextfile.txt
treehouse ~ $


----------------------------     mv (moves/ or renames files)   --------------------------------------------------------

This is used to rename files and move them around to different directories.  Folders can also be moved as well.


ex:

treehouse ~ $ ls 								| listing what's in our current directory
documents hello.txt
treehouse ~ $ mv hello.txt hi.txt				| moving contents of hello.txt into a new file named hi.txt(or renaming)
treehouse ~ $ ls 								| listing what's in our current directory
documents hi.txt
treehouse ~ $mv hi.txt documents/				| moving hi.txt into the documents directory or folder
treehouse ~ $ ls
documents
treehouse ~ $ ls documents/						| listing what's in the documents directory
hi.txt  how_to_go_home.txt
treehouse ~ $ mv documents/hi.txt .				| moving the documents/hi.txt into our current directory
treehouse ~ $ ls
documents hi.txt
treehouse ~ $ mv hi.txt documents/hello.txt 	| this will rename the hi.txt to hello.txt
documents
treehouse ~ $ mv documents docs 				| this will (essentially) rename the documents folder docs
treehouse ~ $ ls
docs
treehouse ~ $ mv documents/hello.txt .			| this will move the hello.txt back into our current directory
treehouse ~ $ ls
documents
treehouse ~ $


----------------------------   cp (copies a file directory)   ----------------------------------------------------------

This is a lot like move but it leaves the original in place.


(file) ex:

treehouse ~ $ cp hello.txt hi.txt 				|
treehouse ~ $ ls
documents hello.txt hi.txt
treehouse ~ $


(directory) ex:

treehouse ~ $ cp -r documents docs 				| -r stands for 'recursive' and is needed when copying all the files
treehouse ~ $ ls
docs documents hello.txt hi.txt
treehouse ~ $


--------------------------    rm (removes a File or Directory)   -------------------------------------------------------

There is no coming back when you remove something.

(file) ex:

treehouse ~ $ ls
docs documents hello.txt hi.txt
treehouse ~ $ rm hi.txt
treehouse ~ $ ls
docs documents hello.txt
treehouse ~ $


(directory) ex:

treehouse ~ $ ls
docs documents hello.txt
treehouse ~ $ rm -r docs
treehouse ~ $ ls
documents hello.txt


----------------------------     mkdir (make directory)   ----------------------------------------------------------


ex:

treehouse ~ $ ls
documents hello.txt
treehouse ~ $ mkdir pictures 					| maing a directory called pictures
treehouse ~ $ ls
docuemnts hello.txt pictures
treehouse ~ $ ls pictures/ 						| list what's inside the pictures directory (obviously there's nothing)
treehouse ~ $ mkdir documents/notes
treehouse ~ $ mkdir documents/notes/console 	| making a directory named console inside a directory named notes
treehouse ~ $ rm -r documents/notes
treehouse ~ $ ls documents/
how_to_go_home.txt
treehouse ~ $ mkdir -p documents/notes/console/ | -p means create any level deep documents
treehouse ~ $ cd documents/
treehouse ~/documents $ ls
how_to_go_home.txt notes
treehouse ~/documents $ cd notes
treehouse ~/documents/notes $ ls
notes
treehouse ~/documents/notes $ clear 			| will take us back to the beginning

treehouse ~/documents/notes $ pwd				| shows us the present working directory
/home/treehouse/documents/notes


----------------------------     whoami (curent user)   ----------------------------------------------------

Displays the user you are currently signed in as.

ex:

treehouse ~ $ whoami
treehouse
treehouse ~ $


------------------------     adduser (adds a user)   ---------------------------------------------------


ex:

treehouse ~ $ sudo adduser mike					|
Adding new user 'mike' ...
Adding new group 'mike' (1002) ...
Adding new user 'mike' (1002) with group 'mike' ...
Creating home directory '/home/mike' ...
Copying files from '/etc/skel' ...
Enter new UNIX password: (type password here)
Retype new UNIX password:
passwd: password updated successfully
Changing the user information for mike
Enter the new value, or press ENTER for the default
		Full Name []: mike the frog						| not fully necessary
		Room Number []:
		Work Phone []:								| if you don't want to enter anything just hit enter
		Home PHone []:
		Other []:
Is the information correct? [Y/n]					| notice the capital 'Y', this means it's the default and you
													| can just hit enter to continue


----------------------------     su (switch user)   ---------------------------------------------------------


ex:

treehouse ~ $ whoami
treehouse
treehouse ~ $ su mike
Password: (type password here)
mike@domU-12-31-39-06-31-OB:/home/treehouse$ whoami
mike
mike@domU-12-31-39-06-31-OB:/home/treehouse$ pwd 	| the prompt is different here
/home/treehouse 									| you stay in the same directory when you switch users
mike@domU-12-31-39-06-31-OB:/home/treehouse$

-- to sign out

mike@domU-12-31-39-06-31-OB:/home/treehouse$ exit 	| this exits from the current session, out of the 'su' command and
exit												| will switch you back to the previous user
treehouse ~ $

OR

mike@domU-12-31-39-06-31-OB:/home/treehouse$ su treehouse
Password: (type password here)
treehouse ~ $


----------------------------     chmod (modifies the mode)   ---------------------------------------------------------

Changes the permissions (mode) of a file or directory


ex:

treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-rw-r--  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt
treehouse ~ $ chmod o+w hello.txt								 <-	| 'adding' the 'write' operator to the 'other' party
treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-rw-rw-  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt 	| <- look here, the 'w' was 'added' to the 'other'
treehouse ~ $ 														| party
treehouse ~ $ chmod +x hello.txt									| 'adding' the 'execute' operator to every party
treehouse ~ $ ls -l 												|
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-rw-rw-  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt 	| <- look here, the 'x' was 'added' to 'all' the
treehouse ~ $ 														| parties. Now everyone can execute the file.
treehouse ~ $ chmod -x hello.txt									| 'removing' the 'execute' operator from every
treehouse ~ $ ls -l 												| party
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-rw-rw-  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt 	| <- look here, the 'x' was 'removed' from 'all'
treehouse ~ $ 														| the parties. Now no-one can execute the file.




----------------------------     chown (changes the owner)   ---------------------------------------------------------

Changes the owner of a file or directory AND can change the group as well

(owner) ex: 			command used: sudo chown mike hello.txt

treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-r-----  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt
treehouse ~ $  sudo chown mike hello.txt									<-	| changing the owner to 'mike'
treehouse ~ $ ls -l 															| MUST USE 'sudo' which overrides
total 8 																		| any permissions
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-r-----  1  mike 	  treehouse  175  Oct 10 13:57 hello.txt 			<-	| the most he can do with it is read
treehouse ~ $ 		 															| the file.  If you try to use nano, it
		 																		| won't let you write to it.

(group & owner) ex:  	command used: sudo chown mike:mike hello.txt

treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-r-----  1  mike 	  treehouse  175  Oct 10 13:57 hello.txt
treehouse ~ $  sudo chown mike:mike hello.txt								<-	| changing the owner to 'mike'
treehouse ~ $ ls -l 															| MUST USE 'sudo' which overrides
total 8 																		| any permissions



----------------------------     sudo (super user)   ---------------------------------------------------------

Run a command as a super user.  Allows you to run a command with the privileges of the root without having to switch to the root user or needing to know the root password.

-- helpful hint

sudo !! - Run the previous command as the super user.


ex:

treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-r-----  1  treehouse  treehouse  175  Oct 10 13:57 hello.txt
treehouse ~ $  chown mike hello.txt 										 <-  | missing the sudo
chown: changing ownership of 'hello.txt' : Operation not permitted 				 | won't let it run
treehouse ~ $  sudo !! 															 | !! repeats the last command run
sudo chown mike hello.txt
treehouse ~ $ ls -l
total 8
drwxrwxr-x  2  treehouse  treehouse 4096  Oct 10 13:55 documents
-rw-r-----  1  mike 	  treehouse  175  Oct 10 13:57 hello.txt  			 <-  | notice the changed user: mike

----------------------------     x (some little explanation)   ---------------------------------------------------------


















